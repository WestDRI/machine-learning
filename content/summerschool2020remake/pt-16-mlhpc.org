#+title: Additional notes on running ML jobs on Compute Canada clusters
#+description: Reading
#+colordes: #538cc6
#+slug: pt-16-mlhpc
#+weight: 17

* GPU(s)

** GPU types

Several Compute Canada clusters have GPUs. Their numbers and types differ:

{{<img src="/img/cc_gpu.png" title="" width="%" line-height="1rem">}}
From <a href="https://docs.computecanada.ca/wiki/Using_GPUs_with_Slurm">Compute Canada Wiki</a>
<br><br>
{{</img>}}

The default is {{<b>}}12G P100{{</b>}}, but you can request another type with {{<c>}}SBATCH --gres=gpu:&lt;type&gt;:&lt;number&gt;{{</c>}} (example: {{<c>}}--gres=gpu:p100l:1{{</c>}} to request a 16G P100 on Cedar). Please [[https://docs.computecanada.ca/wiki/Using_GPUs_with_Slurm#Specifying_the_type_of_GPU_to_use][refer to the Compute Canada Wiki]] for more details.

** Number of GPU(s)

#+BEGIN_export html
<font color="#bf540c"><b>Try running your model on a single GPU first.</b></font>
#+END_export

It is very likely that you do not need more than one GPU. Asking for more than you need will greatly increase your waiting time until your job is run. The lesson on [[https://westgrid-ml.netlify.app/summerschool2020remake/pt-15-distributed.html][distributed computing with PyTorch]] gives a few information as to when you might benefit from using several GPUs and provides some links to more resources. We will also offer workshops on distributed ML in the future. In any event, you should test your model before asking for several GPUs.

** CPU/GPU ratio

Here are Compute Canada recommendations:

*Béluga*:\\
No more than 10 CPU per GPU.

*Cedar*:\\
P100 GPU: no more than 6 CPU per GPU.\\
V100 GPU: no more than 8 CPU per GPU.

*Graham*:\\
No more than 16 CPU per GPU.

* Code testing 

It might be wise to test your code in an interactive job before submitting a really big batch job to Slurm.

** Activate your Python virtual environment

#+BEGIN_src sh
$ source ~/env/bin/activate
#+END_src

** Start an interactive job

/Example:/

#+BEGIN_src sh
$ salloc --account=def-<account> --gres=gpu:1 --cpus-per-task=6 --mem=32000 --time=0:30:0
#+END_src

** Prepare the data

Create a temporary data directory in {{<b>}}$SLURM_TMPDIR{{</b>}}:

#+BEGIN_src sh
(env) $ mkdir $SLURM_TMPDIR/data
#+END_src

#+BEGIN_simplebox
/Note:/ {{<s>}}The variable {{<b>}}$SLURM_TMPDIR{{</b>}} is created by Slurm on the compute node where a job is running. Its path is {{<b>}}/localscratch/&lt;user&gt;.&lt;jobid&gt;.0{{</b>}}. Anything in it gets deleted when the job is done.
#+END_simplebox

Extract the data into it:

#+BEGIN_src sh
(env) $ tar xf ~/projects/def-<user>/<data>.tar -C $SLURM_TMPDIR/data
#+END_src

** Try to run your code

Play in Python to test your code:

#+BEGIN_src sh
(env) $ python
#+END_src

#+BEGIN_src python
>>> import torch
>>> ...
#+END_src

/Note:/ {{<s>}}if you want to exit the virtual environment:

#+BEGIN_src sh
(env) $ deactivate
#+END_src

* Checkpoints

Long jobs should have a checkpoint at least every 24 hours. This ensures that an outage won't lead to days of computation lost and it will help get the job started by the scheduler sooner.

For instance, you might want to have checkpoints every {{<b>}}n{{</b>}} epochs (choose {{<b>}}n{{</b>}} so that {{<b>}}n{{</b>}} epochs take less than 24 hours to run).

In PyTorch, you can create dictionaries with all the information necessary and save them as {{<b>}}.tar{{</b>}} files with {{<c>}}torch.save(){{</c>}}. You can then load them back with {{<c>}}torch.load(){{</c>}}.

The information you want to save in each checkpoint includes the model’s {{<b>}}state_dict{{</b>}}, the optimizer’s {{<b>}}state_dict{{</b>}}, the {{<b>}}epoch{{</b>}} at which you stopped, the latest training {{<b>}}loss{{</b>}}, and anything else needed to restart training where you left off.

/Example:/

Saving a checkpoint during training could look something like this:

#+BEGIN_src python
torch.save({
    'epoch': <last epoch run>,
    'model_state_dict': net.state_dict(),
    'optimizer_state_dict': optimizer.state_dict(),
    'loss': <latest loss>,
}, <path/to/checkpoint-file.tar>)
#+END_src

To restart, initialize the model and optimizer, load the dictionary, and resume training:

#+BEGIN_src python
# Initialize the model and optimizer
model = <your model>
optimizer = <your optimizer>

# Load the dictionary
checkpoint = torch.load(<path/to/checkpoint-file.tar>)
model.load_state_dict(checkpoint['model_state_dict'])
optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
epoch = checkpoint['epoch']
loss = checkpoint['loss']

# Resume training
model.train()
#+END_src

* TensorBoard on the cluster

[[https://github.com/tensorflow/tensorboard][TensorBoard]] allows to visually track your model metrics (e.g. loss, accuracy, model graph, etc.). It requires a lot of processing power however, so if you want to use it on a Compute Canada cluster, *do not run it from the login node.* Instead, run it as part of your job. This section guides you through the whole workflow.

** Launch TensorBoard

First, you need to launch TensorBoard in the background (with a trailing ~&~) before running your Python script. To do so, ad to your {{<b>}}sbatch{{</b>}} script:

#+BEGIN_src sh
tensorboard --logdir=/tmp/<your log dir> --host 0.0.0.0 &
#+END_src

/Example:/

#+BEGIN_src sh
#!/bin/bash
#SBATCH ...
...

tensorboard --logdir=/tmp/<your log dir> --host 0.0.0.0 &
python $SOURCEDIR/<script>.py $SLURM_TMPDIR/data
#+END_src

** Create a connection between the compute node and your computer

Once the job is running, you need to create a connection between the compute node running TensorBoard and your computer.

First, you need to find the hostname of the compute node running the Tensorboard server. This is the value under {{<b>}}NODELIST{{</b>}} for your job when you run:

#+BEGIN_src sh
$ sq
#+END_src

Then, *from your computer*, enter this {{<c>}}ssh{{</c>}} command:

#+BEGIN_src sh
[local]$ ssh -N -f -L localhost:6006:<node hostname>:6006 <user>@<cluster>.computecanada.ca
#+END_src

/(Replace {{<c>}}&lt;node hostname&gt;{{</c>}} by the compute node hostname you just identified, {{<c>}}&lt;user&gt;{{</c>}} by your user name, and {{<c>}}&lt;cluster&gt;{{</c>}} by the name of the Compute Canada cluster hostname—e.g. beluga, cedar, graham.)/

** Access TensorBoard

You can now open a browser (on your computer) and go to http://localhost:6006 to monitor your model running on a compute node in the cluster!

* Running several similar jobs

A number of ML tasks (e.g. [[https://en.wikipedia.org/wiki/Hyperparameter_optimization][hyperparameter optimization]]) require running several instances of similar jobs. Grouping them into a single job with [[https://docs.computecanada.ca/wiki/GLOST][GLOST]] or [[https://docs.computecanada.ca/wiki/GNU_Parallel][GNU Parallel]] reduces the stress on the scheduler.

* Comments & questions
