---
title: Loading data
description: Zoom
colordes: "#e86e0a"
slug: loading_data
weight: 15
execute:
  error: true
format: hugo
jupyter: python3
---

## Load packages

```{python}
import torch
import torchaudio
import matplotlib.pyplot as plt
```

## Download and unzip data

PyTorch comes with many classic datasets.

{{<ex>}}
Examples:
{{</ex>}}

- *[here](https://pytorch.org/vision/stable/datasets.html) is the list of available datasets for vision,*
- *[here](https://pytorch.org/audio/stable/datasets.html?highlight=dataset#module-torchaudio.datasets) is the list for audio,*
- *[here](https://pytorch.org/text/stable/datasets.html?highlight=dataset) is the list for texts.*
{{<br size="3">}}

This is convenient to develop and test your model, or to compare its performance with existing models using these datasets.

Here, we will use [the YESNO dataset](https://www.openslr.org/1/) which can be accessed through [the torchaudio.datasets.YESNO class](https://pytorch.org/audio/stable/datasets.html#torchaudio.datasets.YESNO):

```{.python}
help(torchaudio.datasets.YESNO)
```
```
Help on class YESNO in module torchaudio.datasets.yesno:

class YESNO(torch.utils.data.dataset.Dataset)

 |  YESNO(root: Union[str, pathlib.Path], url: str = 'http://www.openslr.org/resources/1/waves_yesno.tar.gz', folder_in_archive: str = 'waves_yesno', download: bool = False) -> None
 |  
 |  Args:
 |      root (str or Path): Path to the directory where the dataset is found or downloaded.
 |      url (str, optional): The URL to download the dataset from.
 |          (default: "http://www.openslr.org/resources/1/waves_yesno.tar.gz")
 |      folder_in_archive (str, optional):
 |          The top-level directory of the dataset. (default: "waves_yesno")
 |      download (bool, optional):
 |          Whether to download the dataset if it is not found at root path. (default: False).
```
{{<br size="4">}}

Let's create a Python object with our data:

```{python}
yesno_data = torchaudio.datasets.YESNO(root='./', download=True)
```

## Explore the data

A data point in YESNO is a tuple of `waveform`, `sample_rate`, and `labels` (the labels are `1` for "yes" and `0` for "no").

Let's have a look at the first data point:

```{python}
yesno_data[0]
```

Or, more nicely:

```{python}
waveform, sample_rate, labels = yesno_data[0]
print("Waveform: {}\nSample rate: {}\nLabels: {}".format(waveform, sample_rate, labels))
```

You can also plot the data. Let's look at the waveform:

```{python}
plt.figure()
plt.plot(waveform.t().numpy())
```

## Create a DataLoader

DataLoaders are Python iterables created by the [torch.utils.data.DataLoader class](https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader) from a dataset and a sampler.

We already have a dataset (`yesno_data`). Now we need a sampler (or sampling strategy) to draw samples from it. The sampling strategy contains the batch size, whether the data get shuffled prior to sampling, the number of worker used, etc.

To create a DataLoader with shuffled data and batch size of 1 (the default), we run:

```{python}
data_loader = torch.utils.data.DataLoader(yesno_data, shuffle=True)
```

`data_loader` is an iterable of 60 elements:

```{python}
len(data_loader)
```

## Why do we need to create a DataLoader?

A DataLoader is the iterable that "presents" data to a model. When we train a model, we run it for each element of the DataLoader in a for loop:

```{.python}
for i in data_loader:
    <run some model>
```

## Comments & questions
