#+title: Loading and exploring the MNIST
#+description: Practice
#+colordes: #dc7309
#+slug: pt-10-mnist
#+weight: 10

* The MNIST dataset

As you learnt in the past 2 videos, the MNIST is one of the classic datasets used for testing machine learning systems. It consists of pairs of images of handwritten digits and their corresponding labels.

{{<img src="/img/school/mnist_nw.png" title="" width="70%" line-height="0.5rem">}}
<center>Modified from <a href="https://commons.wikimedia.org/w/index.php?curid=64810040">Josef Steppan, Wikimedia</a></center>
{{</img>}}

{{<br>}}
The images are composed of 28x28 pixels of greyscale RGB codes ranging from 0 to 255 and the labels are the digits from 0 to 9 that each image represents.

{{<img src="/img/school/mnist_example.png" title="" width="76.5%" line-height="0.5rem">}}
{{</img>}}

There are 60,000 training pairs and 10,000 testing pairs.

The goal is to build a neural network which can learn from the training set to properly identify the handwritten digits and which will perform well when presented with the testing set that it has never seen. This is a typical case of [[https://westgrid-ml.netlify.app/schoolremake/pt-05-ml.html#headline-3][supervised learning]].

* Load Python modules

#+BEGIN_src python
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
#+END_src

* Set the device argument to CPU

Since our training cluster does not have GPUs, we are setting the device argument to ='cpu'=:

#+BEGIN_src python
device = torch.device('cpu')
#+END_src

#+BEGIN_simplebox
/Note:/ {{<s>}}If you have a CUDA-enabled GPU on your computer and [[https://westgrid-ml.netlify.app/schoolremake/pt-03-local.html][if you are running the code locally]], you can run:

#+BEGIN_src python
device = torch.device('cuda')
#+END_src

This is also what you will want to use when running jobs on the Compute Canada clusters.
#+END_simplebox

* Get and prepare the MNIST data

In the Compute Canada clusters, a good place to store data shared amongst users of a project is in the {{<b>}}/project{{</b>}} file system; more precisely, in {{<b>}}/project/def-&lt;group&gt;{{</b>}}, where {{<b>}}&lt;group&gt;{{</b>}} is usually the name of your PI. You can access it from your home through a symbolic link in {{<b>}}~/projects{{</b>}}: {{<b>}}~/projects/def-&lt;group&gt;{{</b>}}.

In our training cluster, we are all part of the group {{<b>}}def-sponsor00{{</b>}}, so we will all download and access the MNIST data in {{<b>}}~/projects/def-sponsor00/data{{</b>}}.

You can download the dataset directly from [[http://yann.lecun.com/exdb/mnist/][the MNIST website]], but the PyTorch package TorchVision has tools to download the classic vision datasets, including the MNIST.

** Training data

#+BEGIN_src python
train = datasets.MNIST(
    'projects/def-sponsor00/data',
    train = True,
    download = True,
    transform = transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))]))
#+END_src

mean is 0.1307 while std is 0.3081

** Test data

#+BEGIN_src python
test = datasets.MNIST(
    'projects/def-sponsor00/data',
    train = False,
    download = False,
    transform = transforms.Compose([
                       transforms.ToTensor(),
                       transforms.Normalize((0.1307,), (0.3081,)) ]))
#+END_src

#+BEGIN_src python
train[0][0].size()
#+END_src


* Explore the data

** 

** Plot an image from the MNIST

* Pass the data through DataLoader

** Training data

#+BEGIN_src python
train_loader = torch.utils.data.DataLoader(
    train,
    batch_size = 4,
    shuffle = True)
#+END_src

** Test data

#+BEGIN_src python
test_loader = torch.utils.data.DataLoader(
    test,
    batch_size = 4,
    shuffle = False)
#+END_src


#+BEGIN_src python
for data in data_loader:
  print("Data: ", data)
  print("Waveform: {}\nSample rate: {}\nLabels: {}".format(data[0], data[1], data[2]))
  break
#+END_src


* Comments & questions
