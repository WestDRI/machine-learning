#+title: The building blocks of artificial neural networks: tensors
#+description: Practice
#+colordes: #dc7309
#+slug: pt-07-tensor
#+weight: 7

PyTorch's central object is the /tensor/. Tensors have many similarities with NumPy's /ndarrays/, but they can be computed on GPUs. They are extremely well suited to build neural networks.

In this lesson, we will explore tensors: how to create them, run operations on them, and most importantly, what they really represent. *Run all the code so that you can look at the outputs and explore on your own.*

* Activate your Python virtual environment

Now is the time to activate the virtual environment that [[https://westgrid-ml.netlify.app/schoolremake/pt-02-cluster.html#headline-4][you created]] so that you will have access to the Python packages [[https://westgrid-ml.netlify.app/schoolremake/pt-02-cluster.html#headline-7][you installed]] in it.

#+BEGIN_src sh
$ source ~/env/bin/activate
#+END_src

* Start an interactive job

For instance:

#+BEGIN_src sh
$ salloc --cpus-per-task=1 --mem=3G --time=0:30:0
#+END_src

* Load PyTorch

First, we need to load the ~torch~ package:

#+BEGIN_src python
import torch
#+END_src

* Dimensions

PyTorch's /tensors/ are homogeneous multidimensional arrays.

You can create them with a variety of methods such as:

- ~torch.rand~, for a tensor filled with random numbers from a uniform distribution on \([0, 1)\)
- ~torch.randn~, for a tensor filled with numbers from the standard normal distribution
- ~torch.empty~, for an uninitialized tensor
- ~torch.zeros~, for a tensor filled with \(0\)
- ~torch.ones~, for a tensor filled with \(1\)

Each element you pass to these methods represents the length of one dimension. Consequently, the number of elements determines the number of dimensions of the tensor.

{{<br>}}
_Let's have a look at a few examples:_

#+BEGIN_src python
torch.rand(1)
#+END_src

This is a one-dimensional tensor. Its length in the unique dimesion is 1. So it is a tensor with a single element.

When a tensor has a unique element, that element can be returned as a number with:

#+BEGIN_src python
torch.rand(1).item()
#+END_src

{{<br>}}

#+BEGIN_src python
torch.rand(2)
#+END_src

This is another one-dimensional tensor. Its length in the unique dimesion is 2.

{{<br>}}

#+BEGIN_src python
torch.rand(3)
#+END_src

A one-dimensional tensor. Its length in the unique dimesion is 3.

{{<br>}}

#+BEGIN_src python
torch.rand(1, 1)
torch.rand(1, 1).item()
#+END_src

Two-dimensional tensor. Its length in one dimesion 1 and its length in the other dimesion is also 1. So this is also a tensor with a single element.

{{<br>}}

#+BEGIN_src python
torch.rand(1, 1, 1)
#+END_src

Three-dimensional tensor with a single element.

{{<br>}}

#+BEGIN_src python
torch.rand(3, 1)
#+END_src

Two-dimensional tensor. Its length in one dimension is 3 and in the other 1.

{{<br>}}

#+BEGIN_src python
torch.rand(2, 6)
#+END_src

Two-dimensional tensor. Its length in one dimension is 2 and in the other 6

{{<br>}}

#+BEGIN_src python
torch.rand(2, 1, 5)
#+END_src

Three-dimensional tensor. Its length in one dimension is 2, in a second dimension it is 1, and in the third dimension it is 5.

{{<br>}}

Play with a few more examples until this all makes sense:

#+BEGIN_src python
torch.rand(2, 2, 5)
torch.rand(1, 1, 5)
torch.rand(1, 1, 5, 1)
torch.rand(2, 3, 5, 2)
torch.rand(2, 3, 5, 2, 4)
torch.rand(3, 5, 4, 2, 1)
#+END_src

{{<br>}}

You can get the dimension of a tensor with the method ~dim~:

#+BEGIN_src python
torch.rand(3, 5, 4, 2, 1).dim()
#+END_src

And its size with the method ~size~:

#+BEGIN_src python
torch.rand(3, 5, 4, 2, 1).size()
#+END_src

* Operations

Let's take the addition as an example:

/Note: you need to have tensors of matching dimensions./

#+BEGIN_src python
x = torch.rand(2)
y = torch.rand(2)

x
y
#+END_src

The addition can be done with either of:

#+BEGIN_src python
x + y
torch.add(x, y)
#+END_src

** In-place operations

In-place operations are post-fixed with ~_~:

#+BEGIN_src python
x
x.add_(y)
x
#+END_src

* GPU

xxxxlook at _like


* Comments & questions
